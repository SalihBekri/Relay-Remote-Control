CCS PCM C Compiler, Version 5.015, 5967               19-Jul-24 23:54

               Filename:   C:\Users\PC\Desktop\HOME AUTOMATION\code\main.lst

               ROM used:   746 words (9%)
                           Largest free fragment is 2048
               RAM used:   100 (27%) at main() level
                           124 (34%) worst case
               Stack used: 8 locations (3 in main + 5 for interrupts)
               Stack size: 8

*
0000:  MOVLW  02
0001:  MOVWF  0A
0002:  GOTO   2B0
0003:  NOP
0004:  MOVWF  7F
0005:  SWAPF  03,W
0006:  CLRF   03
0007:  MOVWF  21
0008:  MOVF   0A,W
0009:  MOVWF  20
000A:  CLRF   0A
000B:  MOVF   04,W
000C:  MOVWF  22
000D:  MOVF   77,W
000E:  MOVWF  23
000F:  MOVF   78,W
0010:  MOVWF  24
0011:  MOVF   79,W
0012:  MOVWF  25
0013:  MOVF   7A,W
0014:  MOVWF  26
0015:  BSF    03.6
0016:  MOVF   0D,W
0017:  BCF    03.6
0018:  MOVWF  27
0019:  BSF    03.6
001A:  MOVF   0F,W
001B:  BCF    03.6
001C:  MOVWF  28
001D:  BSF    03.6
001E:  MOVF   0C,W
001F:  BCF    03.6
0020:  MOVWF  29
0021:  BSF    03.6
0022:  MOVF   0E,W
0023:  BCF    03.6
0024:  MOVWF  2A
0025:  BCF    03.7
0026:  BCF    03.5
0027:  MOVLW  8C
0028:  MOVWF  04
0029:  BTFSS  00.5
002A:  GOTO   02D
002B:  BTFSC  0C.5
002C:  GOTO   04E
002D:  MOVF   22,W
002E:  MOVWF  04
002F:  MOVF   23,W
0030:  MOVWF  77
0031:  MOVF   24,W
0032:  MOVWF  78
0033:  MOVF   25,W
0034:  MOVWF  79
0035:  MOVF   26,W
0036:  MOVWF  7A
0037:  MOVF   27,W
0038:  BSF    03.6
0039:  MOVWF  0D
003A:  BCF    03.6
003B:  MOVF   28,W
003C:  BSF    03.6
003D:  MOVWF  0F
003E:  BCF    03.6
003F:  MOVF   29,W
0040:  BSF    03.6
0041:  MOVWF  0C
0042:  BCF    03.6
0043:  MOVF   2A,W
0044:  BSF    03.6
0045:  MOVWF  0E
0046:  BCF    03.6
0047:  MOVF   20,W
0048:  MOVWF  0A
0049:  SWAPF  21,W
004A:  MOVWF  03
004B:  SWAPF  7F,F
004C:  SWAPF  7F,W
004D:  RETFIE
004E:  BCF    0A.3
004F:  BCF    0A.4
0050:  GOTO   18D
.................... #include <main.h> 
.................... #include <16F877A.h> 
.................... //////////// Standard Header file for the PIC16F877A device //////////////// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996, 2013 Custom Computer Services          //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
.................... #device PIC16F877A 
*
01B1:  MOVF   00,F
01B2:  BTFSC  03.2
01B3:  GOTO   1CD
01B4:  BSF    03.6
01B5:  CLRF   1D
01B6:  MOVF   04,W
01B7:  MOVWF  1C
01B8:  BCF    1D.0
01B9:  BTFSC  03.7
01BA:  BSF    1D.0
01BB:  MOVF   00,W
01BC:  MOVWF  1E
01BD:  BCF    03.6
01BE:  CALL   153
01BF:  BSF    03.6
01C0:  MOVF   1C,W
01C1:  MOVWF  04
01C2:  BCF    03.7
01C3:  BTFSC  1D.0
01C4:  BSF    03.7
01C5:  INCF   04,F
01C6:  BTFSS  03.2
01C7:  GOTO   1CB
01C8:  BCF    03.6
01C9:  INCF   05,F
01CA:  BSF    03.6
01CB:  BCF    03.6
01CC:  GOTO   1B1
*
01D1:  DATA 41,2A
01D2:  DATA 0D,05
01D3:  DATA 00,00
*
025C:  MOVF   0B,W
025D:  BSF    03.6
025E:  MOVWF  10
025F:  BCF    03.6
0260:  BCF    0B.7
0261:  BSF    03.5
0262:  BSF    03.6
0263:  BSF    0C.7
0264:  BSF    0C.0
0265:  NOP
0266:  NOP
0267:  BCF    03.5
0268:  BTFSS  10.7
0269:  GOTO   26D
026A:  BCF    03.6
026B:  BSF    0B.7
026C:  BSF    03.6
026D:  MOVF   0C,W
026E:  ANDLW  7F
026F:  BTFSC  03.2
0270:  GOTO   2AC
0271:  MOVWF  10
0272:  MOVF   0D,W
0273:  MOVWF  11
0274:  MOVF   0F,W
0275:  MOVWF  12
0276:  MOVF   10,W
0277:  BCF    03.6
0278:  BTFSS  0C.4
0279:  GOTO   278
027A:  MOVWF  19
027B:  BSF    03.6
027C:  MOVF   11,W
027D:  MOVWF  0D
027E:  MOVF   12,W
027F:  MOVWF  0F
0280:  BCF    03.6
0281:  MOVF   0B,W
0282:  BSF    03.6
0283:  MOVWF  13
0284:  BCF    03.6
0285:  BCF    0B.7
0286:  BSF    03.5
0287:  BSF    03.6
0288:  BSF    0C.7
0289:  BSF    0C.0
028A:  NOP
028B:  NOP
028C:  BCF    03.5
028D:  BTFSS  13.7
028E:  GOTO   292
028F:  BCF    03.6
0290:  BSF    0B.7
0291:  BSF    03.6
0292:  RLF    0C,W
0293:  RLF    0E,W
0294:  ANDLW  7F
0295:  BTFSC  03.2
0296:  GOTO   2AC
0297:  MOVWF  10
0298:  MOVF   0D,W
0299:  MOVWF  11
029A:  MOVF   0F,W
029B:  MOVWF  12
029C:  MOVF   10,W
029D:  BCF    03.6
029E:  BTFSS  0C.4
029F:  GOTO   29E
02A0:  MOVWF  19
02A1:  BSF    03.6
02A2:  MOVF   11,W
02A3:  MOVWF  0D
02A4:  MOVF   12,W
02A5:  MOVWF  0F
02A6:  INCF   0D,F
02A7:  BTFSC  03.2
02A8:  INCF   0F,F
02A9:  BCF    03.6
02AA:  GOTO   25C
02AB:  BSF    03.6
02AC:  BCF    03.6
02AD:  BCF    0A.3
02AE:  BCF    0A.4
02AF:  GOTO   2CF (RETURN)
....................  
.................... #list 
....................  
.................... #device ADC=16 
....................  
.................... #FUSES NOWDT                 	//No Watch Dog Timer 
.................... #FUSES NOBROWNOUT            	//No brownout reset 
.................... #FUSES NOLVP                 	//No low voltage prgming, B3(PIC16) or B5(PIC18) used for I/O 
....................  
.................... #use delay(crystal=16MHz) 
*
013E:  MOVLW  1F
013F:  MOVWF  04
0140:  BSF    03.7
0141:  MOVF   00,W
0142:  BTFSC  03.2
0143:  GOTO   152
0144:  MOVLW  05
0145:  MOVWF  78
0146:  CLRF   77
0147:  DECFSZ 77,F
0148:  GOTO   147
0149:  DECFSZ 78,F
014A:  GOTO   146
014B:  MOVLW  2E
014C:  MOVWF  77
014D:  DECFSZ 77,F
014E:  GOTO   14D
014F:  GOTO   150
0150:  DECFSZ 00,F
0151:  GOTO   144
0152:  RETURN
....................  
....................  
.................... #use fast_io(b) 
....................  
.................... #define LCD_ENABLE_PIN  PIN_B2 
.................... #define LCD_RS_PIN      PIN_B0 
.................... #define LCD_RW_PIN      PIN_B1 
.................... #define LCD_DATA4       PIN_B4 
.................... #define LCD_DATA5       PIN_B5 
.................... #define LCD_DATA6       PIN_B6 
.................... #define LCD_DATA7       PIN_B7 
....................  
.................... #include <lcd.c> 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////                             LCD.C                                     //// 
.................... ////                 Driver for common LCD modules                         //// 
.................... ////                                                                       //// 
.................... ////  lcd_init()   Must be called before any other function.               //// 
.................... ////                                                                       //// 
.................... ////  lcd_putc(c)  Will display c on the next position of the LCD.         //// 
.................... ////                 \a  Set cursor position to upper left                 //// 
.................... ////                 \f  Clear display, set cursor to upper left           //// 
.................... ////                 \n  Go to start of second line                        //// 
.................... ////                 \b  Move back one position                            //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \n character     //// 
.................... ////              will erase all remanining characters on the current      //// 
.................... ////              line, and move the cursor to the beginning of the next   //// 
.................... ////              line.                                                    //// 
.................... ////              If LCD_EXTENDED_NEWLINE is defined, the \r character     //// 
.................... ////              will move the cursor to the start of the current         //// 
.................... ////              line.                                                    //// 
.................... ////                                                                       //// 
.................... ////  lcd_gotoxy(x,y) Set write position on LCD (upper left is 1,1)        //// 
.................... ////                                                                       //// 
.................... ////  lcd_getc(x,y)   Returns character at position x,y on LCD             //// 
.................... ////                                                                       //// 
.................... ////  lcd_cursor_on(int1 on)   Turn the cursor on (on=TRUE) or off         //// 
.................... ////              (on=FALSE).                                              //// 
.................... ////                                                                       //// 
.................... ////  lcd_set_cgram_char(w, *p)   Write a custom character to the CGRAM.   //// 
.................... ////                                                                       //// 
.................... ////                                                                       //// 
.................... ////  CONFIGURATION                                                        //// 
.................... ////  The LCD can be configured in one of two ways: a.) port access or     //// 
.................... ////  b.) pin access.  Port access requires the entire 7 bit interface     //// 
.................... ////  connected to one GPIO port, and the data bits (D4:D7 of the LCD)     //// 
.................... ////  connected to sequential pins on the GPIO.  Pin access                //// 
.................... ////  has no requirements, all 7 bits of the control interface can         //// 
.................... ////  can be connected to any GPIO using several ports.                    //// 
.................... ////                                                                       //// 
.................... ////  To use port access, #define LCD_DATA_PORT to the SFR location of     //// 
.................... ////  of the GPIO port that holds the interface, -AND- edit LCD_PIN_MAP    //// 
.................... ////  of this file to configure the pin order.  If you are using a         //// 
.................... ////  baseline PIC (PCB), then LCD_OUTPUT_MAP and LCD_INPUT_MAP also must  //// 
.................... ////  be defined.                                                          //// 
.................... ////                                                                       //// 
.................... ////  Example of port access:                                              //// 
.................... ////     #define LCD_DATA_PORT getenv("SFR:PORTD")                         //// 
.................... ////                                                                       //// 
.................... ////  To use pin access, the following pins must be defined:               //// 
.................... ////     LCD_ENABLE_PIN                                                    //// 
.................... ////     LCD_RS_PIN                                                        //// 
.................... ////     LCD_RW_PIN                                                        //// 
.................... ////     LCD_DATA4                                                         //// 
.................... ////     LCD_DATA5                                                         //// 
.................... ////     LCD_DATA6                                                         //// 
.................... ////     LCD_DATA7                                                         //// 
.................... ////                                                                       //// 
.................... ////  Example of pin access:                                               //// 
.................... ////     #define LCD_ENABLE_PIN  PIN_E0                                    //// 
.................... ////     #define LCD_RS_PIN      PIN_E1                                    //// 
.................... ////     #define LCD_RW_PIN      PIN_E2                                    //// 
.................... ////     #define LCD_DATA4       PIN_D4                                    //// 
.................... ////     #define LCD_DATA5       PIN_D5                                    //// 
.................... ////     #define LCD_DATA6       PIN_D6                                    //// 
.................... ////     #define LCD_DATA7       PIN_D7                                    //// 
.................... ////                                                                       //// 
.................... /////////////////////////////////////////////////////////////////////////////// 
.................... ////        (C) Copyright 1996,2010 Custom Computer Services           //// 
.................... //// This source code may only be used by licensed users of the CCS C  //// 
.................... //// compiler.  This source code may only be distributed to other      //// 
.................... //// licensed users of the CCS C compiler.  No other use, reproduction //// 
.................... //// or distribution is permitted without written permission.          //// 
.................... //// Derivative programs created using this software in object code    //// 
.................... //// form are not restricted in any way.                               //// 
.................... /////////////////////////////////////////////////////////////////////////// 
....................  
.................... #ifndef __LCD_C__ 
.................... #define __LCD_C__ 
....................  
.................... // define the pinout. 
.................... // only required if port access is being used. 
.................... typedef struct   
.................... {                            // This structure is overlayed 
....................    int1 enable;           // on to an I/O port to gain 
....................    int1 rs;               // access to the LCD pins. 
....................    int1 rw;               // The bits are allocated from 
....................    int1 unused;           // low order up.  ENABLE will 
....................    unsigned int     data : 4;         // be LSB pin of that port. 
....................   #if defined(__PCD__)       // The port used will be LCD_DATA_PORT. 
....................    unsigned int    reserved: 8; 
....................   #endif 
.................... } LCD_PIN_MAP; 
....................  
.................... // this is to improve compatability with previous LCD drivers that accepted 
.................... // a define labeled 'use_portb_lcd' that configured the LCD onto port B. 
.................... #if ((defined(use_portb_lcd)) && (use_portb_lcd==TRUE)) 
....................  #define LCD_DATA_PORT getenv("SFR:PORTB") 
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    // these definitions only need to be modified for baseline PICs. 
....................    // all other PICs use LCD_PIN_MAP or individual LCD_xxx pin definitions. 
.................... /*                                    EN, RS,   RW,   UNUSED,  DATA  */ 
....................  const LCD_PIN_MAP LCD_OUTPUT_MAP =  {0,  0,    0,    0,       0}; 
....................  const LCD_PIN_MAP LCD_INPUT_MAP =   {0,  0,    0,    0,       0xF}; 
.................... #endif 
....................  
.................... ////////////////////// END CONFIGURATION /////////////////////////////////// 
....................  
.................... #ifndef LCD_ENABLE_PIN 
....................    #define lcd_output_enable(x) lcdlat.enable=x 
....................    #define lcd_enable_tris()   lcdtris.enable=0 
.................... #else 
....................    #define lcd_output_enable(x) output_bit(LCD_ENABLE_PIN, x) 
....................    #define lcd_enable_tris()  output_drive(LCD_ENABLE_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RS_PIN 
....................    #define lcd_output_rs(x) lcdlat.rs=x 
....................    #define lcd_rs_tris()   lcdtris.rs=0 
.................... #else 
....................    #define lcd_output_rs(x) output_bit(LCD_RS_PIN, x) 
....................    #define lcd_rs_tris()  output_drive(LCD_RS_PIN) 
.................... #endif 
....................  
.................... #ifndef LCD_RW_PIN 
....................    #define lcd_output_rw(x) lcdlat.rw=x 
....................    #define lcd_rw_tris()   lcdtris.rw=0 
.................... #else 
....................    #define lcd_output_rw(x) output_bit(LCD_RW_PIN, x) 
....................    #define lcd_rw_tris()  output_drive(LCD_RW_PIN) 
.................... #endif 
....................  
.................... // original version of this library incorrectly labeled LCD_DATA0 as LCD_DATA4, 
.................... // LCD_DATA1 as LCD_DATA5, and so on.  this block of code makes the driver 
.................... // compatible with any code written for the original library 
.................... #if (defined(LCD_DATA0) && defined(LCD_DATA1) && defined(LCD_DATA2) && defined(LCD_DATA3) && !defined(LCD_DATA4) && !defined(LCD_DATA5) && !defined(LCD_DATA6) && !defined(LCD_DATA7)) 
....................    #define  LCD_DATA4    LCD_DATA0 
....................    #define  LCD_DATA5    LCD_DATA1 
....................    #define  LCD_DATA6    LCD_DATA2 
....................    #define  LCD_DATA7    LCD_DATA3 
.................... #endif 
....................  
.................... #ifndef LCD_DATA4 
.................... #ifndef LCD_DATA_PORT 
....................    #if defined(__PCB__) 
....................       #define LCD_DATA_PORT      0x06     //portb 
....................       #define set_tris_lcd(x)   set_tris_b(x) 
....................    #else 
....................      #if defined(PIN_D0) 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTD")     //portd 
....................      #else 
....................       #define LCD_DATA_PORT      getenv("SFR:PORTB")     //portb 
....................      #endif 
....................    #endif    
.................... #endif 
....................  
.................... #if defined(__PCB__) 
....................    LCD_PIN_MAP lcd, lcdlat; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
.................... #elif defined(__PCM__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT 
....................    #byte lcdtris = LCD_DATA_PORT+0x80 
.................... #elif defined(__PCH__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #byte lcd = LCD_DATA_PORT 
....................    #byte lcdlat = LCD_DATA_PORT+9 
....................    #byte lcdtris = LCD_DATA_PORT+0x12 
.................... #elif defined(__PCD__) 
....................    LCD_PIN_MAP lcd, lcdlat, lcdtris; 
....................    #word lcd = LCD_DATA_PORT 
....................    #word lcdlat = LCD_DATA_PORT+2 
....................    #word lcdtris = LCD_DATA_PORT-0x02 
.................... #endif 
.................... #endif   //LCD_DATA4 not defined 
....................  
.................... #ifndef LCD_TYPE 
....................    #define LCD_TYPE 2           // 0=5x7, 1=5x10, 2=2 lines 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_TWO 
....................    #define LCD_LINE_TWO 0x40    // LCD RAM address for the second line 
.................... #endif 
....................  
.................... #ifndef LCD_LINE_LENGTH 
....................    #define LCD_LINE_LENGTH 20 
.................... #endif 
....................  
.................... unsigned int8 lcd_read_nibble(void); 
....................  
.................... unsigned int8 lcd_read_byte(void) 
.................... { 
....................    unsigned int8 low,high; 
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_INPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_float(LCD_DATA4); 
*
0051:  BSF    03.5
0052:  BSF    06.4
....................    output_float(LCD_DATA5); 
0053:  BSF    06.5
....................    output_float(LCD_DATA6); 
0054:  BSF    06.6
....................    output_float(LCD_DATA7); 
0055:  BSF    06.7
....................   #else 
....................    lcdtris.data = 0xF; 
....................   #endif 
....................  #endif 
....................          
....................    lcd_output_rw(1); 
0056:  BCF    03.5
0057:  BSF    06.1
....................    delay_cycles(1); 
0058:  NOP
....................    lcd_output_enable(1); 
0059:  BSF    06.2
....................    delay_cycles(1); 
005A:  NOP
....................    high = lcd_read_nibble(); 
*
0088:  MOVF   78,W
0089:  MOVWF  26
....................        
....................    lcd_output_enable(0); 
008A:  BCF    03.6
008B:  BCF    06.2
....................    delay_cycles(1); 
008C:  NOP
....................    lcd_output_enable(1); 
008D:  BSF    06.2
....................    delay_us(1); 
008E:  GOTO   08F
008F:  GOTO   090
....................    low = lcd_read_nibble(); 
*
00BD:  MOVF   78,W
00BE:  MOVWF  25
....................        
....................    lcd_output_enable(0); 
00BF:  BCF    03.6
00C0:  BCF    06.2
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
00C1:  BSF    03.5
00C2:  BCF    06.4
....................    output_drive(LCD_DATA5); 
00C3:  BCF    06.5
....................    output_drive(LCD_DATA6); 
00C4:  BCF    06.6
....................    output_drive(LCD_DATA7); 
00C5:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................  #endif 
....................  
....................    return( (high<<4) | low); 
00C6:  BCF    03.5
00C7:  BSF    03.6
00C8:  SWAPF  26,W
00C9:  MOVWF  77
00CA:  MOVLW  F0
00CB:  ANDWF  77,F
00CC:  MOVF   77,W
00CD:  IORWF  25,W
00CE:  MOVWF  78
00CF:  BCF    03.6
00D0:  RETURN
.................... } 
....................  
.................... unsigned int8 lcd_read_nibble(void) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
*
005B:  BSF    03.6
005C:  CLRF   27
*
0090:  BSF    03.6
0091:  CLRF   27
....................    unsigned int8 n = 0x00; 
....................  
....................    /* Read the data port */ 
....................    n |= input(LCD_DATA4); 
*
005D:  MOVLW  00
005E:  BCF    03.6
005F:  BTFSC  06.4
0060:  MOVLW  01
0061:  BSF    03.6
0062:  IORWF  27,F
*
0092:  MOVLW  00
0093:  BCF    03.6
0094:  BTFSC  06.4
0095:  MOVLW  01
0096:  BSF    03.6
0097:  IORWF  27,F
....................    n |= input(LCD_DATA5) << 1; 
*
0063:  MOVLW  00
0064:  BCF    03.6
0065:  BTFSC  06.5
0066:  MOVLW  01
0067:  MOVWF  77
0068:  BCF    03.0
0069:  RLF    77,F
006A:  MOVF   77,W
006B:  BSF    03.6
006C:  IORWF  27,F
*
0098:  MOVLW  00
0099:  BCF    03.6
009A:  BTFSC  06.5
009B:  MOVLW  01
009C:  MOVWF  77
009D:  BCF    03.0
009E:  RLF    77,F
009F:  MOVF   77,W
00A0:  BSF    03.6
00A1:  IORWF  27,F
....................    n |= input(LCD_DATA6) << 2; 
*
006D:  MOVLW  00
006E:  BCF    03.6
006F:  BTFSC  06.6
0070:  MOVLW  01
0071:  MOVWF  77
0072:  RLF    77,F
0073:  RLF    77,F
0074:  MOVLW  FC
0075:  ANDWF  77,F
0076:  MOVF   77,W
0077:  BSF    03.6
0078:  IORWF  27,F
*
00A2:  MOVLW  00
00A3:  BCF    03.6
00A4:  BTFSC  06.6
00A5:  MOVLW  01
00A6:  MOVWF  77
00A7:  RLF    77,F
00A8:  RLF    77,F
00A9:  MOVLW  FC
00AA:  ANDWF  77,F
00AB:  MOVF   77,W
00AC:  BSF    03.6
00AD:  IORWF  27,F
....................    n |= input(LCD_DATA7) << 3; 
*
0079:  MOVLW  00
007A:  BCF    03.6
007B:  BTFSC  06.7
007C:  MOVLW  01
007D:  MOVWF  77
007E:  RLF    77,F
007F:  RLF    77,F
0080:  RLF    77,F
0081:  MOVLW  F8
0082:  ANDWF  77,F
0083:  MOVF   77,W
0084:  BSF    03.6
0085:  IORWF  27,F
*
00AE:  MOVLW  00
00AF:  BCF    03.6
00B0:  BTFSC  06.7
00B1:  MOVLW  01
00B2:  MOVWF  77
00B3:  RLF    77,F
00B4:  RLF    77,F
00B5:  RLF    77,F
00B6:  MOVLW  F8
00B7:  ANDWF  77,F
00B8:  MOVF   77,W
00B9:  BSF    03.6
00BA:  IORWF  27,F
....................     
....................    return(n); 
*
0086:  MOVF   27,W
0087:  MOVWF  78
*
00BB:  MOVF   27,W
00BC:  MOVWF  78
....................   #else 
....................    return(lcd.data); 
....................   #endif 
.................... } 
....................  
.................... void lcd_send_nibble(unsigned int8 n) 
.................... { 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    /* Write to the data port */ 
....................    output_bit(LCD_DATA4, bit_test(n, 0)); 
*
00D1:  BSF    03.6
00D2:  BTFSC  26.0
00D3:  GOTO   0D8
00D4:  BCF    03.6
00D5:  BCF    06.4
00D6:  GOTO   0DA
00D7:  BSF    03.6
00D8:  BCF    03.6
00D9:  BSF    06.4
....................    output_bit(LCD_DATA5, bit_test(n, 1)); 
00DA:  BSF    03.6
00DB:  BTFSC  26.1
00DC:  GOTO   0E1
00DD:  BCF    03.6
00DE:  BCF    06.5
00DF:  GOTO   0E3
00E0:  BSF    03.6
00E1:  BCF    03.6
00E2:  BSF    06.5
....................    output_bit(LCD_DATA6, bit_test(n, 2)); 
00E3:  BSF    03.6
00E4:  BTFSC  26.2
00E5:  GOTO   0EA
00E6:  BCF    03.6
00E7:  BCF    06.6
00E8:  GOTO   0EC
00E9:  BSF    03.6
00EA:  BCF    03.6
00EB:  BSF    06.6
....................    output_bit(LCD_DATA7, bit_test(n, 3)); 
00EC:  BSF    03.6
00ED:  BTFSC  26.3
00EE:  GOTO   0F3
00EF:  BCF    03.6
00F0:  BCF    06.7
00F1:  GOTO   0F5
00F2:  BSF    03.6
00F3:  BCF    03.6
00F4:  BSF    06.7
....................   #else       
....................    lcdlat.data = n; 
....................   #endif 
....................        
....................    delay_cycles(1); 
00F5:  NOP
....................    lcd_output_enable(1); 
00F6:  BSF    06.2
....................    delay_us(2); 
00F7:  MOVLW  02
00F8:  MOVWF  77
00F9:  DECFSZ 77,F
00FA:  GOTO   0F9
00FB:  NOP
....................    lcd_output_enable(0); 
00FC:  BCF    06.2
00FD:  RETURN
.................... } 
....................  
.................... void lcd_send_byte(unsigned int8 address, unsigned int8 n) 
.................... { 
....................   #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................   #else 
....................    lcd_enable_tris(); 
00FE:  BSF    03.5
00FF:  BCF    06.2
....................    lcd_rs_tris(); 
0100:  BCF    06.0
....................    lcd_rw_tris(); 
0101:  BCF    06.1
....................   #endif 
....................  
....................    lcd_output_rs(0); 
0102:  BCF    03.5
0103:  BCF    06.0
....................    while ( bit_test(lcd_read_byte(),7) ) ; 
0104:  CALL   051
0105:  MOVF   78,W
0106:  BSF    03.6
0107:  MOVWF  25
0108:  BTFSS  25.7
0109:  GOTO   10C
010A:  BCF    03.6
010B:  GOTO   104
....................    lcd_output_rs(address); 
010C:  MOVF   23,F
010D:  BTFSS  03.2
010E:  GOTO   113
010F:  BCF    03.6
0110:  BCF    06.0
0111:  GOTO   115
0112:  BSF    03.6
0113:  BCF    03.6
0114:  BSF    06.0
....................    delay_cycles(1); 
0115:  NOP
....................    lcd_output_rw(0); 
0116:  BCF    06.1
....................    delay_cycles(1); 
0117:  NOP
....................    lcd_output_enable(0); 
0118:  BCF    06.2
....................    lcd_send_nibble(n >> 4); 
0119:  BSF    03.6
011A:  SWAPF  24,W
011B:  MOVWF  25
011C:  MOVLW  0F
011D:  ANDWF  25,F
011E:  MOVF   25,W
011F:  MOVWF  26
0120:  BCF    03.6
0121:  CALL   0D1
....................    lcd_send_nibble(n & 0xf); 
0122:  BSF    03.6
0123:  MOVF   24,W
0124:  ANDLW  0F
0125:  MOVWF  25
0126:  MOVWF  26
0127:  BCF    03.6
0128:  CALL   0D1
0129:  RETURN
.................... } 
....................  
.................... #if defined(LCD_EXTENDED_NEWLINE) 
.................... unsigned int8 g_LcdX, g_LcdY; 
.................... #endif 
....................  
.................... void lcd_init(void)  
.................... { 
....................    unsigned int8 i; 
....................    unsigned int8 LCD_INIT_STRING[4] = {0x20 | (LCD_TYPE << 2), 0xc, 1, 6}; 
*
01DE:  MOVLW  28
01DF:  BSF    03.6
01E0:  MOVWF  11
01E1:  MOVLW  0C
01E2:  MOVWF  12
01E3:  MOVLW  01
01E4:  MOVWF  13
01E5:  MOVLW  06
01E6:  MOVWF  14
....................                              // These bytes need to be sent to the LCD 
....................                              // to start it up. 
....................     
....................  
....................    lcd_output_enable(0); 
01E7:  BCF    03.6
01E8:  BCF    06.2
....................    lcd_output_rs(0); 
01E9:  BCF    06.0
....................    lcd_output_rw(0); 
01EA:  BCF    06.1
....................  
....................  #if defined(__PCB__) 
....................    set_tris_lcd(LCD_OUTPUT_MAP); 
....................  #else 
....................   #if (defined(LCD_DATA4) && defined(LCD_DATA5) && defined(LCD_DATA6) && defined(LCD_DATA7)) 
....................    output_drive(LCD_DATA4); 
01EB:  BSF    03.5
01EC:  BCF    06.4
....................    output_drive(LCD_DATA5); 
01ED:  BCF    06.5
....................    output_drive(LCD_DATA6); 
01EE:  BCF    06.6
....................    output_drive(LCD_DATA7); 
01EF:  BCF    06.7
....................   #else 
....................    lcdtris.data = 0x0; 
....................   #endif 
....................    lcd_enable_tris(); 
01F0:  BCF    06.2
....................    lcd_rs_tris(); 
01F1:  BCF    06.0
....................    lcd_rw_tris(); 
01F2:  BCF    06.1
01F3:  BCF    03.5
01F4:  CLRF   2B
01F5:  BTFSC  0B.7
01F6:  BSF    2B.7
01F7:  BCF    0B.7
....................  #endif 
....................      
....................    delay_ms(15); 
01F8:  MOVLW  0F
01F9:  BSF    03.6
01FA:  MOVWF  1F
01FB:  BCF    03.6
01FC:  CALL   13E
01FD:  BTFSC  2B.7
01FE:  BSF    0B.7
....................    for(i=1;i<=3;++i) 
01FF:  MOVLW  01
0200:  BSF    03.6
0201:  MOVWF  10
0202:  MOVF   10,W
0203:  SUBLW  03
0204:  BTFSS  03.0
0205:  GOTO   220
0206:  BCF    03.6
0207:  CLRF   2B
0208:  BTFSC  0B.7
0209:  BSF    2B.7
020A:  BCF    0B.7
....................    { 
....................        lcd_send_nibble(3); 
020B:  MOVLW  03
020C:  BSF    03.6
020D:  MOVWF  26
020E:  BCF    03.6
020F:  CALL   0D1
0210:  BTFSC  2B.7
0211:  BSF    0B.7
0212:  CLRF   2B
0213:  BTFSC  0B.7
0214:  BSF    2B.7
0215:  BCF    0B.7
....................        delay_ms(5); 
0216:  MOVLW  05
0217:  BSF    03.6
0218:  MOVWF  1F
0219:  BCF    03.6
021A:  CALL   13E
021B:  BTFSC  2B.7
021C:  BSF    0B.7
021D:  BSF    03.6
021E:  INCF   10,F
021F:  GOTO   202
0220:  BCF    03.6
0221:  CLRF   2B
0222:  BTFSC  0B.7
0223:  BSF    2B.7
0224:  BCF    0B.7
....................    } 
....................     
....................    lcd_send_nibble(2); 
0225:  MOVLW  02
0226:  BSF    03.6
0227:  MOVWF  26
0228:  BCF    03.6
0229:  CALL   0D1
022A:  BTFSC  2B.7
022B:  BSF    0B.7
022C:  CLRF   2B
022D:  BTFSC  0B.7
022E:  BSF    2B.7
022F:  BCF    0B.7
....................    delay_ms(5); 
0230:  MOVLW  05
0231:  BSF    03.6
0232:  MOVWF  1F
0233:  BCF    03.6
0234:  CALL   13E
0235:  BTFSC  2B.7
0236:  BSF    0B.7
....................    for(i=0;i<=3;++i) 
0237:  BSF    03.6
0238:  CLRF   10
0239:  MOVF   10,W
023A:  SUBLW  03
023B:  BTFSS  03.0
023C:  GOTO   253
....................       lcd_send_byte(0,LCD_INIT_STRING[i]); 
023D:  MOVLW  11
023E:  ADDWF  10,W
023F:  MOVWF  04
0240:  BSF    03.7
0241:  MOVF   00,W
0242:  MOVWF  15
0243:  BCF    03.6
0244:  CLRF   2B
0245:  BTFSC  0B.7
0246:  BSF    2B.7
0247:  BCF    0B.7
0248:  BSF    03.6
0249:  CLRF   23
024A:  MOVF   15,W
024B:  MOVWF  24
024C:  BCF    03.6
024D:  CALL   0FE
024E:  BTFSC  2B.7
024F:  BSF    0B.7
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
0250:  BSF    03.6
0251:  INCF   10,F
0252:  GOTO   239
....................    g_LcdX = 0; 
....................    g_LcdY = 0; 
....................   #endif 
.................... } 
....................  
.................... void lcd_gotoxy(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    unsigned int8 address; 
....................     
....................    if(y!=1) 
*
012A:  BSF    03.6
012B:  DECFSZ 20,W
012C:  GOTO   12E
012D:  GOTO   131
....................       address=LCD_LINE_TWO; 
012E:  MOVLW  40
012F:  MOVWF  21
0130:  GOTO   132
....................    else 
....................       address=0; 
0131:  CLRF   21
....................       
....................    address+=x-1; 
0132:  MOVLW  01
0133:  SUBWF  1F,W
0134:  ADDWF  21,F
....................    lcd_send_byte(0,0x80|address); 
0135:  MOVF   21,W
0136:  IORLW  80
0137:  MOVWF  22
0138:  CLRF   23
0139:  MOVF   22,W
013A:  MOVWF  24
013B:  BCF    03.6
013C:  CALL   0FE
....................  
....................   #if defined(LCD_EXTENDED_NEWLINE) 
013D:  RETURN
....................    g_LcdX = x - 1; 
....................    g_LcdY = y - 1; 
....................   #endif 
.................... } 
....................  
.................... void lcd_putc(char c) 
.................... { 
....................    switch (c) 
*
0153:  BSF    03.6
0154:  MOVF   1E,W
0155:  XORLW  07
0156:  BCF    03.6
0157:  BTFSC  03.2
0158:  GOTO   163
0159:  XORLW  0B
015A:  BTFSC  03.2
015B:  GOTO   16A
015C:  XORLW  06
015D:  BTFSC  03.2
015E:  GOTO   176
015F:  XORLW  02
0160:  BTFSC  03.2
0161:  GOTO   17E
0162:  GOTO   185
....................    { 
....................       case '\a'   :  lcd_gotoxy(1,1);     break; 
0163:  MOVLW  01
0164:  BSF    03.6
0165:  MOVWF  1F
0166:  MOVWF  20
0167:  BCF    03.6
0168:  CALL   12A
0169:  GOTO   18C
....................  
....................       case '\f'   :  lcd_send_byte(0,1); 
016A:  BSF    03.6
016B:  CLRF   23
016C:  MOVLW  01
016D:  MOVWF  24
016E:  BCF    03.6
016F:  CALL   0FE
....................                      delay_ms(2); 
0170:  MOVLW  02
0171:  BSF    03.6
0172:  MOVWF  1F
0173:  BCF    03.6
0174:  CALL   13E
....................                     #if defined(LCD_EXTENDED_NEWLINE) 
....................                      g_LcdX = 0; 
....................                      g_LcdY = 0; 
....................                     #endif 
....................                      break; 
0175:  GOTO   18C
....................  
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       case '\r'   :  lcd_gotoxy(1, g_LcdY+1);   break; 
....................       case '\n'   : 
....................          while (g_LcdX++ < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, ' '); 
....................          } 
....................          lcd_gotoxy(1, g_LcdY+2); 
....................          break; 
....................      #else 
....................       case '\n'   : lcd_gotoxy(1,2);        break; 
0176:  MOVLW  01
0177:  BSF    03.6
0178:  MOVWF  1F
0179:  MOVLW  02
017A:  MOVWF  20
017B:  BCF    03.6
017C:  CALL   12A
017D:  GOTO   18C
....................      #endif 
....................       
....................       case '\b'   : lcd_send_byte(0,0x10);  break; 
017E:  BSF    03.6
017F:  CLRF   23
0180:  MOVLW  10
0181:  MOVWF  24
0182:  BCF    03.6
0183:  CALL   0FE
0184:  GOTO   18C
....................       
....................      #if defined(LCD_EXTENDED_NEWLINE) 
....................       default     :  
....................          if (g_LcdX < LCD_LINE_LENGTH) 
....................          { 
....................             lcd_send_byte(1, c); 
....................             g_LcdX++; 
....................          } 
....................          break; 
....................      #else 
....................       default     : lcd_send_byte(1,c);     break; 
0185:  MOVLW  01
0186:  BSF    03.6
0187:  MOVWF  23
0188:  MOVF   1E,W
0189:  MOVWF  24
018A:  BCF    03.6
018B:  CALL   0FE
....................      #endif 
....................    } 
018C:  RETURN
.................... } 
....................   
.................... char lcd_getc(unsigned int8 x, unsigned int8 y) 
.................... { 
....................    char value; 
....................  
....................    lcd_gotoxy(x,y); 
....................    while ( bit_test(lcd_read_byte(),7) ); // wait until busy flag is low 
....................    lcd_output_rs(1); 
....................    value = lcd_read_byte(); 
....................    lcd_output_rs(0); 
....................     
....................    return(value); 
.................... } 
....................  
.................... // write a custom character to the ram 
.................... // which is 0-7 and specifies which character array we are modifying. 
.................... // ptr points to an array of 8 bytes, where each byte is the next row of 
.................... //    pixels.  only bits 0-4 are used.  the last row is the cursor row, and 
.................... //    usually you will want to leave this byte 0x00. 
.................... void lcd_set_cgram_char(unsigned int8 which, unsigned int8 *ptr) 
.................... { 
....................    unsigned int i; 
....................  
....................    which <<= 3; 
....................    which &= 0x38; 
....................  
....................    lcd_send_byte(0, 0x40 | which);  //set cgram address 
....................  
....................    for(i=0; i<8; i++) 
....................    { 
....................       lcd_send_byte(1, *ptr++); 
....................    } 
....................    
....................    #if defined(LCD_EXTENDED_NEWLINE) 
....................     lcd_gotoxy(g_LcdX+1, g_LcdY+1);  //set ddram address 
....................    #endif 
.................... } 
....................  
.................... void lcd_cursor_on(int1 on) 
.................... { 
....................    if (on) 
....................    { 
....................       lcd_send_byte(0,0x0F);           //turn LCD cursor ON 
....................    } 
....................    else 
....................    { 
....................       lcd_send_byte(0,0x0C);           //turn LCD cursor OFF 
....................    } 
.................... } 
....................  
.................... #endif 
....................  
....................  
.................... #use rs232 (baud=9600, xmit=pin_C6, rcv=pin_C7, parity=N, stop = 1,errors) 
*
0198:  BTFSS  0C.5
0199:  GOTO   198
019A:  MOVF   18,W
019B:  MOVWF  2C
019C:  MOVF   1A,W
019D:  MOVWF  78
019E:  BTFSS  2C.1
019F:  GOTO   1A2
01A0:  BCF    18.4
01A1:  BSF    18.4
.................... char klavye[80]; 
....................  
.................... #int_rda 
.................... void serial_interrupt(){    
....................    output_high(pin_c5); 
*
018D:  BCF    2D.5
018E:  MOVF   2D,W
018F:  BSF    03.5
0190:  MOVWF  07
0191:  BCF    03.5
0192:  BSF    07.5
....................    gets(klavye);  
0193:  MOVLW  A0
0194:  MOVWF  04
0195:  BCF    03.7
0196:  DECF   04,F
0197:  INCF   04,F
*
01A2:  MOVF   78,W
01A3:  MOVWF  00
01A4:  MOVLW  0D
01A5:  SUBWF  00,W
01A6:  BTFSS  03.2
01A7:  GOTO   197
01A8:  CLRF   00
....................    printf(lcd_putc,"\f%s",klavye); 
01A9:  MOVLW  0C
01AA:  BSF    03.6
01AB:  MOVWF  1E
01AC:  BCF    03.6
01AD:  CALL   153
01AE:  MOVLW  A0
01AF:  MOVWF  04
01B0:  BCF    03.7
....................     
....................  
*
01CD:  BCF    0C.5
01CE:  BCF    0A.3
01CF:  BCF    0A.4
01D0:  GOTO   02D
.................... } 
....................  
....................  
.................... void setup(); 
....................  
.................... void main() 
*
02B0:  MOVF   03,W
02B1:  ANDLW  1F
02B2:  MOVWF  03
02B3:  CLRF   2C
02B4:  MOVLW  19
02B5:  BSF    03.5
02B6:  MOVWF  19
02B7:  MOVLW  A2
02B8:  MOVWF  18
02B9:  MOVLW  90
02BA:  BCF    03.5
02BB:  MOVWF  18
02BC:  MOVLW  FF
02BD:  MOVWF  2D
02BE:  BSF    03.5
02BF:  BSF    1F.0
02C0:  BSF    1F.1
02C1:  BSF    1F.2
02C2:  BCF    1F.3
02C3:  MOVLW  07
02C4:  MOVWF  1C
02C5:  BCF    03.7
.................... {   
....................     
....................    setup(); 
02C6:  BCF    03.5
02C7:  GOTO   1D4
....................     
....................    while(True) 
....................    { 
....................    printf("AT\r\n"); 
02C8:  MOVLW  D1
02C9:  BSF    03.6
02CA:  MOVWF  0D
02CB:  MOVLW  01
02CC:  MOVWF  0F
02CD:  BCF    03.6
02CE:  GOTO   25C
....................    delay_ms(2000); 
02CF:  MOVLW  08
02D0:  BSF    03.6
02D1:  MOVWF  10
02D2:  BCF    03.6
02D3:  CLRF   2B
02D4:  BTFSC  0B.7
02D5:  BSF    2B.7
02D6:  BCF    0B.7
02D7:  MOVLW  FA
02D8:  BSF    03.6
02D9:  MOVWF  1F
02DA:  BCF    03.6
02DB:  CALL   13E
02DC:  BTFSC  2B.7
02DD:  BSF    0B.7
02DE:  BSF    03.6
02DF:  DECFSZ 10,F
02E0:  GOTO   2D2
....................    output_high(pin_c5); 
02E1:  BCF    03.6
02E2:  BCF    2D.5
02E3:  MOVF   2D,W
02E4:  BSF    03.5
02E5:  MOVWF  07
02E6:  BCF    03.5
02E7:  BSF    07.5
02E8:  GOTO   2C8
....................    } 
.................... } 
....................  
02E9:  SLEEP
.................... void setup(){ 
....................       
....................    set_tris_b(0x00); 
*
01D4:  MOVLW  00
01D5:  BSF    03.5
01D6:  MOVWF  06
....................    output_low(pin_c5); 
01D7:  BCF    03.5
01D8:  BCF    2D.5
01D9:  MOVF   2D,W
01DA:  BSF    03.5
01DB:  MOVWF  07
01DC:  BCF    03.5
01DD:  BCF    07.5
....................    lcd_init(); 
....................    enable_interrupts(GLOBAL); 
*
0253:  MOVLW  C0
0254:  BCF    03.6
0255:  IORWF  0B,F
....................    enable_interrupts(int_rda); 
0256:  BSF    03.5
0257:  BSF    0C.5
0258:  BCF    03.5
0259:  BCF    0A.3
025A:  BCF    0A.4
025B:  GOTO   2C8 (RETURN)
....................     
.................... } 
....................  

Configuration Fuses:
   Word  1: 3F32   HS NOWDT PUT NOBROWNOUT NOLVP NOCPD NOWRT NODEBUG NOPROTECT
